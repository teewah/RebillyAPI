################################################################################
swagger: "2.0"
info:
  version: "2.1"
  title: "Rebilly REST API"
  contact:
    name: "Rebilly API Support"
    url: "https://www.rebilly.com/contact/"
    email: "integrations@rebilly.com"
  license:
    name: "Rebilly"
    url: "https://my.rebilly.com/api/license/"
  termsOfService: "https://www.rebilly.com/terms/"
  x-logo:
    url: 'https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg'
    backgroundColor: '#0033A0'
  description: |
    # Introduction
    The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
    resource URLs.  It returns HTTP response codes to indicate errors.  It also
    accepts and returns JSON in the HTTP body.  You can use your favorite
    HTTP/REST library for your programming language to use Rebilly's API, or
    you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
    and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

    # Authentication
    When you sign up for an account, you are given your first API key.
    You can generate additional API keys, and delete API keys (as you may
    need to rotate your keys in the future). You authenticate to the
    Rebilly API by providing your secret key in the request header.

    Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
    public key.
    - private key: authenticates each request by searching for the presence
    of an HTTP header: REB-APIKEY.
    - JWT: authenticates each request by the HTTP header: Authorization.
    - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

    Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
    the specific granular permissions and expiration for that JWT.  We call our resource
    for generating JWT [Sessions](#tag/Sessions).

    Rebilly also has a client-side authentication scheme that uses an
    apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
    that you may safely create tokens from the client-side without compromising
    your secret keys.

    Never share your secret keys. Keep them guarded and secure.
    The client-side authentication scheme uses one HTTP header named REB-AUTH.

    <!-- ReDoc-Inject: <security-definitions> -->

    # PHP SDK
    For all PHP SDK examples provided in this spec you will need to configure `$client`.
    You may do it like this:

    ```php
    $client = new Rebilly\Client([
        'apiKey' => 'YourApiKeyHere',
        'baseUrl' => 'https://api.rebilly.com',
    ]);
    ```
################################################################################
host: "api.rebilly.com"
basePath: "/v2.1"
schemes:
  - "https"
x-servers:
  - url: //api.rebilly.com
    description: Live Server
  - url: //api-sandbox.rebilly.com
    description: Sandbox Server
produces:
  - "application/json"
consumes:
  - "application/json"
################################################################################
tags:
  - name: 3D Secure
    description: |
      3D Secure is a way to authenticate and protect transactions.  Typically,
      it's only possible to protect the initial transaction in a subscription
      with 3D Secure.
  - name: API Keys
    description: |
      Always keep your API Keys private.  In addition to your API Keys, you may use
      JSON Web Tokens (JWT) to authenticate to the API.  See
      our [Sessions](#tag/Sessions) resource for more information.
  - name: Bank Accounts
    description: |
      Bank Accounts are a type of payment instrument used to collect
      ACH (echeck) payments, similar to how a payment
      card would be used to for a credit card payment.
  - name: Blacklists
    description: |
      Your blacklists contains values of customerIds, email addresses,
      ipAddresses, bank identification numbers, countries or payment cards that
      you do NOT want to do business with. They are a good tool for managing
      risk. A blacklist entry that expires after a period of time we call a
      greylist.
  - name: Checkout Pages
    description: |
      Hosted checkout pages.
  - name: Contacts
    description: |
      Contacts belong to Customers. A Customer can have many contacts.
      Some contacts are associated to Invoices, Payment Cards, Subscriptions
      and Transactions.
  - name: Coupons
    description: |
      Coupons allows to apply different types of discounts to Invoices, Subscriptions and Plans.
  - name: Customers
    description: |
      Customers are your customers, sometimes known as accounts, clients,
      members, patrons, or players in other systems.
  - name: Customer Authentication
    description: |
      Create authentication credentials, login, logout, and verify your customers.
  - name: Custom Events
    description: |
      If system events can't solve your problems, you are able to create a custom event
      that can fit your requirements, and use it to solve your own business logic.
  - name: Custom Rules
    description: |
      "Don't conform to the rules. Create the rules."
      Rather than adapt your workflow and business, Rebilly can align with your business
      objectives by giving you the power to automate certain behaviors when key events happen.
      You can use this to your advantage to mitigate risk, maximize conversions and minimize costs.
      You have the controls at your fingertips here. If you need more control,
      or help dialing in on a strategy, feel free to contact us.

      When an event happens, it triggers the evaluation of conditions (that you set up),
      in order from top to bottom. If the condition is met, the corresponding actions are executed.
      The conditions continue to be checked until either all of the conditions have been executed,
      or a special "stop" action is executed.
  - name: Custom Fields
    description: |
      Create additional custom fields for particular resources.  You may name,
      describe, and determine the type of the schema.
  - name: Credential Hashes
    description: |
      Get and create SMTP and Webhook credential hashes.
  - name: Disputes
    description: |
      Handle disputes (chargebacks and retrievals).
  - name: Email Credentials
    description: |
      Send automated emails through our system by connecting to your third party
      SMTP server (or your third party email service provider's SMTP server).
  - name: Files
    description: |
      A File is an entity that can store a phyiscal file and some metadata. It also provides an easy access to
      its size, mime-type, user-defined tags and description thus allowing easy sorting and searching among stored
      files.
      There are several methods of file uploading available: multipart/form-data encoded form, RAW POST (by sending
      file contents as POST body), fetching from URL (by providing the file URL via 'url' param)
      Attachment is an entity that is used to link a File to one or multiple objects like Customer, Dispute, Payment,
      Transaction, Subscription, Plan, Product, Invoice, Note. That allows to quickly find and use files related to
      those specific entities.
  - name: Gateway Accounts
    description: |
      Gateway accounts connect payment request to third party networks and platforms.
  - name: Invoices
    description: |
      Invoices leave a record for both you and your customer of the products sold.
  - name: Layouts
    description: |
      Layouts are used to hold collections of plans. A layout can be used to
      power a pricing page. You can make multiple layouts, and use rules to
      target them to different audiences.
  - name: Lists
    description: |
      Lists contain sets of values and may be referenced within Rules criteria.

      You may grant permissions to edit Lists to different people than those who can edit Rules.
      It may be useful if your workflow involves frequent updates to value sets used in criteria.
  - name: Migrate payment cards
    description: |
      Migrate payment cards from one gateway to another.
  - name: Notes
    description: |
      Leave notes on a customer record to have a handy location to share with
      others who may interface with the customer.  It's great for customer service.
  - name: Organizations
    description: |
      Organizations include the name and address of the entities related to your
      account. An account may be multi-national, and support multiple
      organizations. Note: Organizations are share between "Live" and "Sandbox"
  - name: Payments
    description: |
      Collect money from your customers with payments.  You can schedule a payment
      to occur in the future.  You can assign a dunning schedule to a payment to collect
      in the case of a decline.

      Some payments may be, what we term, suspended payments.  These types of payments
      require user interaction.  For example, an initial PayPal purchase, a 3D Secure
      purchase, China Union Pay, and more require the customer's interaction to
      complete the payment.  We call these a "suspended" payment flow.
  - name: Payment Cards
    description: |
      Payment cards are a type of payment instrument used for credit and debit card
      sales.  Rebilly securely vaults the full payment card number, and can pass it
      onward securely to any gateway account to transact business.
  - name: Payment Tokens
    description: |
      Payment tokens are used to reduce the scope of PCI DSS compliance.  A payment
      token can be made using a different authentication scheme (refer to the public key
      authentication scheme in the Authentication section), which allows you to
      create a payment tokeng directly from the browser, bypassing the need to send
      sensitive cardholder info to your servers.  We recommend using this with our
      Rebilly.js library, which helps you wire a form into this API resource and create
      payment tokens.
  - name: Plans
    description: |
      Plans are a template for making a subscription.  For example, you may have a plan
      that has a 30-day free trial followed by a recurring charge of $19.95 per month
      until canceled.  The combination of the plan and a request to make a subscription
      will apply those instructions to create the invoices according to the plan's
      schedule.
  - name: Products
    description: |
      Proposed:  Your product includes digital goods, services, and physical goods.
  - name: Reports
    description: |
      The Rebilly Reporting API is currently experimental.  You may see
      the [Reports API Documentation here](https://rebilly.github.io/RebillyReportsAPI/).
  - name: Rules
    description: |
      "Don't conform to the rules. Create the rules."
      Rather than adapt your workflow and business, Rebilly can align with your business
      objectives by giving you the power to automate certain behaviors when key events happen.
      You can use this to your advantage to mitigate risk, maximize conversions and minimize costs.
      You have the controls at your fingertips here. If you need more control,
      or help dialing in on a strategy, feel free to contact us.

      When an event happens, it triggers the evaluation of conditions (that you set up),
      in order from top to bottom. If the condition is met, the corresponding actions are executed.
      The conditions continue to be checked until either all of the conditions have been executed,
      or a special "stop" action is executed.
  - name: Sessions
    description: |
      A session contains a token, which is a JSON Web Token.  The token is created
      with a user's signin credentials.

      This token can be used to authenticate to the API.  In addition, the session can be set to
      expire at a particular time, and has very granular control over permissions.
      Use the token to then authenticate for further requests to the Rebilly API.

      The token should be kept private, but could be stored on the user's browser
      client to simulate a "session."
  - name: Shipping Zones
    description: |
      A shipping zone contains regions and countries that you ship to. Each shipping zone has its own shipping rates.
  - name: Status
    description: |
      Check the status of the Rebilly API (no authentication required).
  - name: Subscriptions
    description: |
      A subscription applies a plan's template to create invoices for a customer at the
      appropriate scheduled intervals.  A subscription may also determine if the payment
      is collected automatically (with autopay set true).
  - name: Taxes
    description: |
      Proposed: You can map a product to a tax category.  The tax category is used by
      tax providers to calculate taxes for invoices.
  - name: Tracking
    description: |
      Tracking is a layer for accessing all the activity (API requests,
      subscriptions, webhooks, events, etc.), thus providing easier
      debugging and issues auditing.
  - name: Transactions
    description: |
      Get and refund transactions.
  - name: Users
    description: |
      A User represents a person who can login to Rebilly, and take actions subject to
      their granted permissions.
  - name: Websites
    description: |
      A Website represents the website/brand that customers interact with... You
      could think of it like a brand.  For example, Nestle owns Perrier and Purina
      and PowerBar.

      We recognize that some enterprises have more than one website (or brand).  The
      website is related to each invoice and each payment gateway account.  This feature
      would allow you to have gateway accounts that are related to multiple websites, or
      exclusive to particular websites.  And gives you more control over your business.
################################################################################
securityDefinitions:
  ApiKey:
    description: |
      When you sign up for an account, you are given your first API key.
      To do so please follow this link: https://www.rebilly.com/site/signup/
      Also you can generate additional API keys, and delete API keys (as you may
      need to rotate your keys in the future).
    name: "REB-APIKEY"
    type: apiKey
    in: header
  JWT:
    description: |
      You can create a JSON Web Token (JWT) via our Sessions resource.
    type: basic
  RebAuth:
    description: |
      Only for the Tokens resource.
      The REB-AUTH value is created in this way
      Generate a Nonce (random string), and a Timestamp (unix timestamp)
      Concatenate the values of ApiUser, Nonce, and Timestamp (in that order).
      Use that value as the input data when you calculate the <a href="http://tools.ietf.org/html/rfc2104">HMAC-SHA1</a> with your secret key, called the signature.
      Forming the four data points into a JSON object.

      ```json
      {
        "REB-APIUSER": "abcdefg",
        "REB-NONCE": "adfsjtreitou345fgkdafgj",
        "REB-TIMESTAMP": "1382591345",
        "REB-SIGNATURE": "a234fc95460401cfg09c9d09"
      }
      ```

      Then base64 encode that JSON object. This is the final value of the REB-AUTH HTTP header
    name: "REB-AUTH"
    type: apiKey
    in: header
################################################################################
security:
  - ApiKey: []
################################################################################
responses:
  AccessForbidden:
    description: "Access forbidden, invalid API-KEY was used"
    schema:
      $ref: "#/definitions/Error"
  NotFound:
    description: "Resource was not found"
    schema:
      $ref: "#/definitions/Error"
  Conflict:
    description: "Conflict"
    schema:
      $ref: "#/definitions/Error"
  InvalidDataError:
    description: "Invalid data was sent"
    schema:
      $ref: "#/definitions/InvalidError"
################################################################################
parameters:
  resourceId:
    name: id
    in: path
    description: The resource identifier string
    type: string
    required: true
  collectionLimit:
    name: limit
    in: query
    description: The collection items limit
    type: integer
    minimum: 0
    maximum: 1000
  collectionOffset:
    name: offset
    in: query
    description: The collection items offset
    type: integer
    minimum: 0
  collectionFilter:
    name: filter
    in: query
    type: string
    description: |
      The collection items filter requires a special format.
      Use "," for multiple allowed values.  Use ";" for multiple fields.
      See the filter guide for more options and examples about this format.
  collectionQuery:
    name: q
    in: query
    type: string
    description: The partial search of the text fields.
  collectionCriteria:
    name: criteria
    in: query
    type: string
    description: The json criteria for collection
  collectionSort:
    name: sort
    in: query
    type: array
    collectionFormat: csv
    description: The collection items sort field and order (prefix with "-" for descending sort).
    items:
      type: string
  collectionFields:
    name: fields
    in: query
    type: string
    description: Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.
  collectionExpand:
    name: expand
    in: query
    type: string
    description: Expand response to get full related object intead of ID.  See the expand guide for more info.
  systemEventType:
    name: eventType
    in: path
    description: The event type
    type: string
    required: true
  rulesVersion:
    name: version
    in: path
    type: integer
    required: true
    minimum: 1
    description: The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.
  hash:
    name: hash
    in: path
    description: The token identifier string
    type: string
    required: true
  mediaType:
    name: Accept
    in: header
    type: string
    enum:
      - application/json
    default: application/json
    description: The response media type
################################################################################
headers:
  Rate-Limit-Limit:
    description: The number of allowed requests in the current period
    type: integer
  Rate-Limit-Remaining:
    description: The number of remaining requests in the current period
    type: integer
  Rate-Limit-Reset:
    description: |
      The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
      when the current period will reset
    type: string
  Pagination-Total:
    description: Total items count
    type: integer
  Pagination-Limit:
    description: Items per page limit
    type: integer
  Pagination-Offset:
    description: Pagination offset
    type: integer
